Peterson's Solution:
---------------------------
    Peterson’s Solution is a well-known algorithm for achieving mutual exclusion in concurrent programming. 
    It allows two processes to safely share a single resource without interference. 
    This solution was designed to solve the critical section problem in systems where two processes need to use 
    the same resource but must not use it at the same time.

What is Peterson's Solution:
---------------------------------
    Peterson’s solution is a software-based solution for ensuring that two processes can access shared 
    resources one at a time (mutual exclusion) while also ensuring that the processes don’t get stuck waiting 
    forever (no starvation).

How it Works:
-----------------
    Peterson's solution uses two shared variables (a flag and a turn variable) to manage access between two processes,
     say Process 0 and Process 1.

1. Shared Variables:
------------------------
flag[0] and flag[1]:
     These are boolean flags indicating whether a process wants to enter the critical section.
turn: 
    This variable indicates whose turn it is to enter the critical section.


2. Algorithm Steps:
--------------------
For Process 0 (P0):


flag[0] = true                // Indicate that P0 wants to enter the critical section
turn = 1                      // Give the turn to Process 1
while (flag[1] == true and turn == 1)  // Wait if Process 1 is in the critical section or wants to enter it
    // Do nothing, just wait
// Enter critical section
flag[0] = false               // Indicate that P0 is done and leave the critical section
For Process 1 (P1):



flag[1] = true                // Indicate that P1 wants to enter the critical section
turn = 0                      // Give the turn to Process 0
while (flag[0] == true and turn == 0)  // Wait if Process 0 is in the critical section or wants to enter it
    // Do nothing, just wait
// Enter critical section
flag[1] = false               // Indicate that P1 is done and leave the critical section
Explanation of the Steps:
flag[i] = true: Each process sets its flag to true when it wants to enter the critical section.
turn = j: 
    The process sets the turn variable to the other process's index 
        (for example, process 0 sets it to 1, and process 1 sets it to 0). 
        This is used to give priority to the other process if both want to enter at the same time.

Waiting condition:
     The process will enter a while loop and wait if the other process is already in the critical section or wants to enter. 
     This is ensured by checking:
        If the other process has set its flag to true (indicating it wants to enter).
        If the turn variable favors the other process.

Critical Section:
     Once the process is allowed to enter, it performs its operations within the critical section.

Exiting the Critical Section:
     Once done, the process sets its flag to false, indicating it is done and leaving the critical section, 
     allowing the other process to enter.

Key Points of Peterson's Solution:
------------------------------------------------------
Mutual Exclusion:
     Only one process can enter the critical section at a time.
No Deadlock:
     The processes will not get stuck forever (each process eventually gets its turn).
No Starvation: 
    Every process gets a chance to enter the critical section based on the turn variable.


Advantages of Peterson’s Solution:
------------------------------------
Simple:
     It’s a simple algorithm that only uses two flags and one turn variable for synchronization.
Works Without Hardware Support: 
    Unlike some other solutions, Peterson’s algorithm doesn't require special hardware support
     (e.g., atomic instructions), making it a software-only solution.
Fair: 
    Both processes get a fair chance to access the critical section, preventing starvation.


Disadvantages:
--------------------
Only for Two Processes:
     This solution is specifically designed for two processes and does not extend easily to more processes.
Busy-Waiting: 
    It uses busy-waiting (i.e., the process checks repeatedly whether it can enter the critical section), which is not efficient in terms of CPU usage.
Complex for Larger Systems:
     While it works for two processes, handling more than two processes would require a more complex algorithm (like a mutex or semaphores).