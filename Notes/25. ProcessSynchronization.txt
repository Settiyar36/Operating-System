Process Synchronization:
----------------------------
    It  is a technique used in operating systems to ensure that multiple processes or threads can run concurrently
     without interfering with each other. 
     It is necessary when multiple processes need to access shared resources (like memory, files, or CPU) 
     to prevent conflicts, data corruption, or inconsistencies.


Why is Process Synchronization Needed:
--------------------------------------
    When two or more processes access a shared resource at the same time, the race condition can occur, 
    where the outcome depends on the order in which the processes access the resource.
     Synchronization prevents such issues and ensures that processes run in a controlled and predictable manner.


1. Independent Processes:
----------------------------------
    Definition: Independent processes are processes that do not share any resources with other processes.
     They do not need synchronization because they do not interact with each other.

    Characteristics:
    -----------------
    Each process runs independently and doesn't rely on or affect any other process.
    There is no need for process synchronization because they don't share data or resources.
    These processes are isolated from each other.
    Example:
        Two programs that run on your computer, like a word processor and a music player.
         They do not interact with each other or share resources, so they don’t require synchronization.

2. Cooperative Processes:
---------------------------
    Definition: Cooperative processes are processes that share resources and interact with each other. 
        They require synchronization to avoid issues like data corruption or conflicts.

    Characteristics:
    -------------------
        These processes rely on each other to complete a task or share data/resources.
        Synchronization mechanisms like mutexes, semaphores, or monitors are needed to ensure safe interaction between processes.
        Race conditions, deadlocks, and data inconsistency can occur if synchronization isn't properly handled.
    Example:
        Consider a banking system where multiple users can check their balance and transfer money. 
        If two users try to transfer money from the same account at the same time, it could cause problems. 
        Therefore, cooperative processes need synchronization to ensure that one user’s transfer doesn't interfere with another’s.
