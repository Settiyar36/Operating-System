Resource Allocation Graph (RAG) :
---------------------------------------
    A Resource Allocation Graph (RAG) is a graphical representation used to show how resources are allocated to
     processes in an operating system. 
     It is mainly used to detect and prevent deadlock by visually representing the relationships between processes and resources.

Key Concepts:
------------------
Processes: Represented by circles (or nodes) in the graph.
Resources: Represented by squares (or nodes) in the graph.
Edges (Arrows): Show the relationships:

Request Edge (P → R):
     An arrow from a process to a resource indicates that the process is requesting that resource.

Assignment Edge (R → P): 
    An arrow from a resource to a process indicates that the resource is currently allocated to that process.


How it Works:
----------------
Request: 
    When a process wants to use a resource, an arrow (request edge) is drawn from the process to the resource.
Allocation: 
        When the resource is allocated to the process, an arrow (assignment edge) is drawn from the resource to the process.
Example:
    Consider 2 processes (P1, P2) and 2 resources (R1, R2).

Process P1 requests Resource R1:
    An arrow points from P1 → R1 (Request edge).
Resource R1 is allocated to P1:
    An arrow points from R1 → P1 (Assignment edge).
Process P2 requests Resource R2:
    An arrow points from P2 → R2 (Request edge).
Resource R2 is allocated to P2:
    An arrow points from R2 → P2 (Assignment edge).



Deadlock Detection Using RAG:
-----------------------------------
    Deadlock occurs if there is a cycle in the graph. This cycle indicates that processes are waiting for each other 
    to release resources, which leads to a deadlock situation.


Example of a cycle (Deadlock situation):

P1 → R1 → P2 → R2 → P1 (A circular waiting situation).
How to Read the Resource Allocation Graph:
    No Cycle:
         If there’s no cycle in the graph, then deadlock is not present. 
         The processes and resources are free to proceed.
    Cycle Exists:
         If a cycle exists, it means there’s a deadlock. Processes are stuck waiting for resources held by each other.

Visual Example of a Resource Allocation Graph:
------------------------------------------------
No Deadlock (No Cycle): 

    P1 → R1 → P2 → R2 → P1  (No cycle, no deadlock)

Deadlock (Cycle Exists):


    P1 → R1 → P2 → R2 → P1  (Cycle detected, deadlock situation)

Advantages of Resource Allocation Graph:
-------------------------------------------
    Simple Visualization: 
        It’s easy to visualize resource allocation and detect potential deadlocks.
    Detecting Cycles:
         RAG makes it simple to detect a deadlock by looking for cycles in the graph.
    Effective for Simple Systems:
         Great for systems with fewer processes and resources.


Disadvantages:
----------------------
Not Scalable: RAGs become complex and hard to manage with a large number of processes and resources.
Only Detects Deadlock: It’s a method for detecting deadlock, not for preventing or recovering from it.