DIFFERENT STRUCTURES OF OS:
--------------------------------------
    The structure of an Operating System (OS) refers to how the components of the OS are organized and how they interact with each other. 
    There are different ways of organizing these components, and the structure typically varies based on the OS design, goals,
     and environment. Hereâ€™s an overview of common OS structures:

1. Monolithic Structure
---------------------------------
Description:
    In a monolithic structure, the OS components (such as process management, file management, memory management, device management, etc.) 
    are tightly integrated into a single, large block of code. 
    All services run in kernel mode and have access to all system resources.

    Characteristics:
        Single large kernel: All OS services (file system, scheduling, process management) reside in one large block of code.
        Direct communication: Modules and components within the kernel can directly communicate with each other.
        Faster execution: Since all components run in kernel mode, the communication between components is fast.
        Hard to maintain: Because all the services are tightly coupled, updating or modifying one component might require changes 
        to the entire system.
    Examples:
        Linux
        Unix

2. Layered Structure:
--------------------------------
Description:
    In a layered structure, the OS is divided into layers, where each layer is built on top of the layer below it.
     Each layer provides a specific set of services to the layer above it.
    The lowest layer interacts directly with hardware, while higher layers provide user-facing functionality.

    Characteristics:
        Modular design: The system is divided into layers, each responsible for a specific function 
        (e.g., hardware abstraction, process management, file system).
        Easy to maintain: Layers can be updated independently of each other.
        Limited direct interaction: Each layer can only communicate with the adjacent layers (above or below), 
        which limits the complexity of interactions.
        Overhead: Communication between layers can introduce overhead due to the abstraction.
    Examples:
        THE Operating System (an experimental OS used in academic environments)
        Windows NT (early versions used a layered architecture)

3. Microkernel Structure:
-------------------------------------
Description:
    In a microkernel structure, the OS is divided into a small, minimal kernel that handles only essential functions, 
    such as memory management, process management, and basic inter-process communication (IPC).
     Other services like device drivers, file systems, and network protocols are moved to user space, outside the kernel.

    Characteristics:
        Minimal kernel: The kernel only includes the essential services; other services run as user processes.
        Modular design: Components of the OS (e.g., file systems, device drivers) run outside the kernel, which makes the system more modular and flexible.
        Stability and security: Since most of the OS runs in user space, faults in user-space services don't crash the entire OS.
        Performance overhead: Communication between user-space services and the microkernel involves more context switching and IPC, leading to performance overhead.
    
    Examples:
        Mach (used in early versions of macOS)
        Minix
        QNX

4. Client-Server Structure:
---------------------------------------
Description:
    In the client-server structure, the OS is divided into clients (user applications or programs) and servers (OS services). 
    Clients make requests to servers, which provide the necessary services.
    The server is often a remote system, and clients communicate with the server over a network.

    Characteristics:
        Distributed nature: Servers can be distributed across a network, which allows the OS to provide services to multiple clients across different machines.
        Scalability: Easy to scale by adding more clients or servers.
        Network communication: Communication between clients and servers usually happens over a network (e.g., via sockets or RPC).
        Centralized control: The servers manage the OS's core functionality, while clients only interact with them for specific services.
    
    Examples:
        Network Operating Systems (e.g., Windows Server, UNIX-based systems)
        Distributed Operating Systems (e.g., Google's Android uses a client-server model for system services)

5. Hybrid Structure:
-----------------------------------------
Description:
    A hybrid structure combines aspects of the monolithic and microkernel structures.
    It uses a microkernel for essential services like communication, process management, and device drivers,
    while other services, such as file management, are implemented in a monolithic fashion or run in user space.

    Characteristics:
        Best of both worlds: Combines the modularity and stability of microkernels with the performance benefits of monolithic systems.
        Flexibility: Allows for a more flexible and scalable architecture compared to a purely monolithic or microkernel approach.
        Complexity: Due to its combination of features, hybrid systems may be more complex to design and maintain.

    Examples:
        macOS (uses a hybrid approach based on the Mach microkernel and components of BSD Unix)
        Windows NT (used hybrid architecture, with elements of both monolithic and microkernel approaches)

6. Object-Oriented Structure:
-----------------------------------------
Description:
    In an object-oriented OS structure, the operating system is designed using object-oriented programming (OOP) principles,
    where different OS components are treated as objects that interact with each other through well-defined interfaces.
    The OS components (e.g., memory manager, process manager) are represented as objects with attributes and methods.

    Characteristics:
        Modular: The use of objects promotes modularity and reusability of components.
        Abstraction: OOP allows for better abstraction of complex system components.
        Inheritance and Polymorphism: Reusability and flexibility of OS components through inheritance and polymorphism,
         which reduces redundancy and facilitates extension.
    Examples:
        Windows (certain components)
        The Object-Oriented Operating System (OOS)

Summary of OS Structures:

OS Structure	                               Description	                                                                 Example OS
----------------------------------------------------------------------------------------------------------------------------------------------------
Monolithic Structure    	    All OS services run in the kernel, tightly integrated.	                                        Linux, Unix

Layered Structure	            OS is divided into layers, each providing a specific functionality.	T           HE OS, Windows NT (early versions)

Microkernel Structure	        Minimal kernel; other services run in user space.	                                    Mach, Minix, QNX

Client-Server Structure	        OS is divided into clients (applications) and servers (OS services), with
                                 communication over a network.	                                                    Network OS, Distributed OS

Hybrid Structure            	Combines microkernel and monolithic features for flexibility and scalability.	                macOS, Windows NT

Object-Oriented Structure	    OS designed using object-oriented programming principles,
                                 where OS components are objects interacting with each other.	                    Windows (certain components),
                                                                                                                                         OOS

Currently, HYBRID OS structure is used by Winodws and linux systems. 
Client server structure is used by cloud services, eg: Hadoop