THREADS:
-----------------------
    A thread is the smallest unit of execution within a process.
     It represents a single task or activity in a program. 
     You can think of a process as a big task, and a thread as a smaller task that helps complete that bigger task.

In simple terms:
     A thread is like a worker inside a company (process).
      The company (process) can have many workers (threads) doing different tasks at the same time.

Why do Threads Matter?
    Threads are important because they allow programs to perform multiple tasks at once, making programs faster and more efficient. 
    For example, you can browse the internet, play music, and download a file all at the same time—each task is handled by a different thread.

Types of Threads:
----------------------
    There are two main types of threads based on where they are created and how they are managed:

1. User Threads:
---------------------
    What it is: These are threads that are created and managed by user-level programs (the program you run, like a game or web browser). 
    The operating system doesn't know about them directly; 
    it's the program that manages these threads.

    Key point: The user has control over the threads.
    Example: In a text editor, you might have one thread for typing text and another for spell checking, both running within the program.

2. Kernel Threads:
---------------------
    What it is: These are threads that are managed directly by the operating system. 
    The kernel (core part of the OS) is responsible for creating, scheduling, and managing these threads. 
    The OS is aware of and controls these threads.
    
    Key point: The operating system has control over these threads.
    Example: In a web server, each incoming request might be handled by a different kernel thread, and the OS manages them for you.

Difference Between User and Kernel Threads::
-------------------------------------------------
    User Threads:
         Managed by the program itself (not by the operating system). 
        They are faster but can be less efficient because the OS doesn't know about them.

Kernel Threads:
     Managed by the operating system. These threads can be slower to create and manage because the OS is involved, 
    but they are more efficient in utilizing the system’s resources.


Other Types of Threads::
-----------------------------------
    Besides user and kernel threads, there are other ways threads can be classified based on how they interact with each other:

3. Single-Threaded Process:
-----------------------------------
    What it is: A process that runs only one thread. Everything in the program happens sequentially—one task after another.
    Example: A simple calculator app that can only perform one operation at a time.

4. Multi-Threaded Process:
-------------------------------------
    What it is: A process that runs multiple threads at the same time. 
    Each thread can execute a different task simultaneously, improving performance.
    Example: A web browser is a multi-threaded process.
    It can have one thread for rendering the web page, another for loading images, and another for handling user inputs.


Comparison: 

Single-Threaded vs Multi-Threaded Process Structure:
--------------------------------------------------------------------------------------------------------------------------------------------------
Aspect	                            Single-Threaded Process	                                                    Multi-Threaded Process

Number of Threads       	One thread for the entire process.                                          	Multiple threads within the same 
                                                                                                                            process.

Execution Flow      	    Executes tasks one by one in sequence.	                                        Executes multiple tasks concurrently 

Process Control Block	    One PCB for the process.	                                                     One PCB for the process, but with 
                                                                                                                    multiple threads.

Memory Management	         Shares the data, stack, and heap.	                                               Threads share data and heap, 
                                                                                                               but each thread has its own stack.

Efficiency                 	Less efficient since tasks are done sequentially.	                        More efficient, as tasks run concurrently.

Example                 	A simple calculator or text editor.	                                       A web browser with multiple tasks like 
                                                                                                                rendering, input handling, and 
                                                                                                                    background tasks.
