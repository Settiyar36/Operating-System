IPC Inter-Process Communication Mechanism:
-----------------------------------------------
    It  refers to the methods or mechanisms used by the operating system to allow different processes to communicate and share data. 
    -->  Since each process operates independently, an IPC mechanism helps processes exchange information and synchronize
        their activities.
    --> These mechanisms ensure that multiple processes running on a system can collaborate, share data, and avoid conflicts, 
        especially when accessing shared resources.


Types of IPC Mechanisms:
----------------------------------
There are several types of IPC mechanisms, each with different features and uses.
 Below are the common IPC mechanisms:


1. Shared Memory:
-----------------------
    How it works: Multiple processes can access the same region of memory to exchange data.
    One process writes to the memory, and others read from it.  No need of Kernel interaction for this. 

    Example: Two processes in a program might share a block of memory to store and update data like variables or arrays.

    Pros:
        Fast communication because thereâ€™s no need to copy data between processes.
    Cons:
        Needs careful synchronization to avoid data corruption (e.g., using locks).
        Can be complex to manage.


2. Message Passing:
-------------------------
    How it works: Processes communicate by sending messages to each other. 
    A sender process sends a message, and a receiver process receives and processes the message.

    Example: A process might send a message to a different process asking for some data or telling it to perform an action.

    Pros:
        Easier to manage compared to shared memory, as each process operates independently.
        Good for distributed systems (processes on different machines).
    
    Cons:
        Slower than shared memory because data has to be copied between processes.
        Might involve more overhead, especially if many messages are being exchanged.



3. Pipes:
----------------------
     A pipe is a simple communication channel that allows processes to send and receive data in a one-way direction. 
     There are two types of pipes:

        1. Anonymous Pipes: Used for communication between related processes (e.g., parent-child processes).
        2. Named Pipes (FIFO): Used for communication between unrelated processes using a name.

    How it works: One process writes data into the pipe, and the other process reads from it.

    Example: A process writes a log message into a pipe, and another process reads and processes the message.

    Pros:

        Simple and efficient for basic communication between processes.
        Named pipes allow communication between unrelated processes.

    Cons:

        One-way communication, so two pipes are needed for bidirectional communication.
        Limited by the size of the pipe buffer.


4. Message Queues:
--------------------------
    A message queue is a queue system where messages are placed by one process and received by another process 
    in a FIFO (First-In, First-Out) order.
    
    How it works: Processes send messages to a queue, and other processes retrieve those messages in the order they arrived.

    Example: A producer process places messages (tasks) into the queue, and a consumer process takes messages
     from the queue to process them.

    Pros:
        Allows asynchronous communication, meaning sender and receiver don't need to be active at the same time.
        Multiple processes can use the same queue.
    Cons:
        Queue size is limited, so messages can be lost if the queue is full.
        Can become complex to manage, especially when handling many messages.


5. Semaphores:
-------------------------
    Semaphores are synchronization tools used to manage access to shared resources between processes. 
    They act as signals to control the execution of processes, ensuring that certain actions occur in a particular order.

    How it works: A semaphore maintains a count that processes can increment or decrement to signal the availability of a 
    resource. For example, when a process wants to access a resource, it checks the semaphore; 
    if the semaphore count is zero, the process waits until it is available.

    Example: A process wants to access a critical section of code. Before doing so, it checks a semaphore to 
    ensure no other process is using the same resource.

    Pros:

        Useful for synchronization of processes, preventing conflicts when accessing shared resources.
        Helps avoid race conditions and data corruption.
    
    Cons:
        
        Can be difficult to implement and manage.
        Improper use of semaphores can lead to deadlocks (where processes wait forever for resources).


6. Sockets:
---------------------------
    Sockets allow processes to communicate over a network, whether they are on the same machine or distributed across
     multiple machines.

    How it works: A socket creates a connection between a client and a server, allowing data to be exchanged over a network.

    Example: A web server communicates with a web browser over a socket to send and receive data.

    Pros:

        Allows communication between processes on different machines (distributed systems).
        Very flexible and supports both TCP and UDP protocols for communication.
    
    Cons:

        Requires network setup and can introduce overhead due to communication delays.
        Can be more complex to implement compared to local IPC mechanisms.

